struct Complex {
    r: Real
    i: Real
}

fn cMul(a: Complex, b: Complex): Complex {
    realComp := a.r * b.r - a.i * b.i
    imagComp := a.r * b.i + a.i * b.r

    return Complex{realComp, imagComp}
}

fn cAdd(a: Complex, b: Complex): Complex {
    realComp := a.r + b.r
    imagComp := a.i + b.i

    return Complex{realComp, imagComp}
}

fn mandelbrot(a: Complex): Int {
    const ITERS := 50
    z := Complex{0., 0.}
    for (i := 0 to ITERS) {
        z = z.cMul(z).cAdd(a)
        if ((z.r*z.r + z.i*z.i) > 4.0) {
            return i
        }
    }
    return ITERS
}

fn sin(x: Real): Real {

    const _PI: Real = 3.14159265359
    const precision: Int = 60

    sign: Int = -1
    x1 := x mod (2. * _PI)

    term: Real = 1.0
    sum: Real = 0.0

    for (iter: Int = 1 to precision) {
        term = term * (x1 / (iter as Real))
        if (iter mod 4 == 1) {
            sum = sum + term
        }
        if (iter mod 4 == 3) {
            sum = sum - term
        }
    }
    return sum
}

fn cos(x: Real): Real {
    const _PI: Real = 3.14159265359
    return sin(x + _PI)
}

struct Color {
    r: Real
    g: Real
    b: Real
}

fn toColor(i: Int): Color {
    if (i >= 50) {
        return Color{0., 0., 0.}
    }

    a := (i as Real) * 0.2

    r := (sin(a) + 1.)/2.
    g := (sin(a + 2.1) + 1.)/2.
    b := (sin(a + 4.2) + 1.)/2.

    return Color{r, g, b}
}

fn reverse(i: Int): Int {
    r: Int = 0
    sum: Int = 0
    n := i
    while (n > 0) {
        r = n mod 10
        sum = (sum * 10) + r
        n = n / 10
    }
    return sum
}

fn write(f: File, i: Int) {
    if (i == 0) {
        f.write('0')
        return ()
    }
    n := reverse(i)
    while (n > 0) {
        r := n mod 10
        f.write((r + 48) as Char)
        n = n / 10
    }
}

fn write(f: File, s: String) {
    for (c in s) {
        f.write(c)
    }
}

fn write(f: File, col: Color, maxVal: Int) {
    f.write((col.r * maxVal) as Int)
    f.write(' ')
    f.write((col.g * maxVal) as Int)
    f.write(' ')
    f.write((col.b * maxVal) as Int)
    f.write('\n')
}

fn main() {
    const FORMAT := "P3"
    const WIDTH := 256
    const HEIGHT := 128
    const MAX_VAL := 255

    with (f := open("uv.ppm", "w")) {
        f.write(FORMAT)
        f.write('\n')
        f.write(WIDTH)
        f.write('\n')
        f.write(HEIGHT)
        f.write('\n')
        f.write(MAX_VAL)
        f.write('\n')

        yStep := 2. / HEIGHT
        xStep := 2.5 / WIDTH

        for (y := -1.0 to 1.05 by yStep) {
            for (x := -2.0 to 0.5 by xStep) {
                f.write(mandelbrot(Complex{x, y}).toColor(), MAX_VAL)
            }
        }
    }
}
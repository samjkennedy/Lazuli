//This really ain't a List but it's a Proof of Concept for a generic type
type List<T> struct {
    data: T[]
}

//fn <T> size(list: List<T>): Int {
//    return list.data.len
//}

fn <T> put(t: T) {
    print(t)
}

//TODO: functions that take erased types, e.g:
//TODO: fn get(intList: List<Int>, index: Int): Int { ... }

//fn <T> get(list: List<T>, index: Int): T {
//    return list.data[index]
//}

fn main() {

//    list := List{[1, 2]}
//
//    print(list.data[1])

    put(1)

//    print(list.size())
//    print(list.get(0))
}
//This really ain't a list but it's a Proof of Concept for a generic type
struct Seq<T> {
    data: T[]
}

//fn <T> size(seq: Seq<T>): Int {
//    return seq.data.len
//}
//
//fn <T> get(seq: Seq<T>, index: Int): T {
//    return seq.data[index]
//}

struct Color {
    r: Real
    g: Real
    b: Real
}

fn printCol(col: Color) {
    print(col.r)
    print(col.g)
    print(col.b)
}

fn main() {

    seq := Seq{[Color{0.5, 0.5, 0.0}, Color{1.0, 1.0, 1.0}]}

    seq.data[1].printCol()

//    print(list.size())
//    print(list.get(0))
}
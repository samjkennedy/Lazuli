//Int isqrt(Int x) {
//    Int i = 1
//    Int result = 1
//    while (result <= x) {
//     i = i + 1
//     result = i * i
//    }
//    return i - 1
//}


//Int[] v2i(Int x, Int y) {
//    return [x, y]
//}
//
//Int[] v = v2i(1, 2)
//
//for (Int i in v) print(i)

//struct V2i {
//    Int x
//    Int y

//    Int mag() {
//        return isqrt(x * x + y * y)
//    }
//}

//struct V3i {
//    Int x
//    Int y
//    Int z
//}

fn sqrt(S: Real): Real {
    iterations: Int = 100
    x0: Real = (S / 10.0)
    x1: Real = (x0 + (S / x0)) / 2.0
    for (i: Int = 1 to iterations) {
        tmp: Real = x0
        x0 = (x1 + (S / x1)) / 2.0
        x1 = tmp
    }
    return x0
}

struct V2R {
    x: Real
    y: Real
}

struct V3R {
    x: Real
    y: Real
    z: Real
}

fn mag3(v: V3R): Real {
    return sqrt(v.x * v.x + v.y * v.y + v.z * v.z)
}
//
v: V3R = V3R(1.0, 2.0, 3.0)
////v: V2R = {1.0, 2.0} //This should also be allowed
print(v.x)
print(v.y)
print(v.z)
print(mag3(v))